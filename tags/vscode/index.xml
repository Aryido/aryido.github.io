<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vscode on Aryido Tech Note</title><link>https://aryido.github.io/tags/vscode/</link><description>Recent content in vscode on Aryido Tech Note</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 May 2024 23:21:38 +0800</lastBuildDate><atom:link href="https://aryido.github.io/tags/vscode/index.xml" rel="self" type="application/rss+xml"/><item><title>Language Server Protocol</title><link>https://aryido.github.io/posts/plugin-extension/language-server-protocol/</link><pubDate>Tue, 21 May 2024 23:21:38 +0800</pubDate><guid>https://aryido.github.io/posts/plugin-extension/language-server-protocol/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Language Server Protocol 簡稱 LSP ，是微軟於 2016 製定的 Protocol 協定，專門用來輔助 Visual Studio Code 開發用的，目標是讓 Code-Editor 能便利地支援更多的程式語言。設計理念是把&lt;strong>語言撰寫領域模型如：自動補全、引用定義、類型檢查器&lt;/strong>等等，這些提供輔助功能的部分拆出去用「公定的介面」來做溝通，給各自領域的人開發。
&lt;div class="figure fig-100" >
&lt;a class="fancybox" href="https://aryido.github.io/images/plugin-extension/lsp-nolsp.jpg" data-fancybox="">
&lt;img class="fig-img" src="https://aryido.github.io/images/plugin-extension/lsp-nolsp.jpg" >
&lt;/a>
&lt;/div>
LSP 專門用於描述 Code-Editor 中，用戶行爲與響應之間&lt;strong>通訊方式&lt;/strong>和&lt;strong>傳輸資料結構&lt;/strong>，像是 VSCode 的 IntelliSense 提供的 auto-completion 就可以基於這個協定支援更多不同的 coding language。 現在支援 LSP 的 Code-Editor 也不少，除了 VSCode 還有 Eclipse 、 Vim 、 NeoVim 都已經支援了，可以在 langserver.org 可以看到各個 client 的支援狀況。&lt;/p>
&lt;/blockquote></description></item><item><title>VSCode 基本 layout 介紹</title><link>https://aryido.github.io/posts/plugin-extension/vscode-layout/</link><pubDate>Tue, 21 May 2024 23:21:38 +0800</pubDate><guid>https://aryido.github.io/posts/plugin-extension/vscode-layout/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>「 整合式開發環境 Integrated Development Environment 簡稱為 IDE 」 ，是一種程式開發軟體，通常只針對特定語言，且有應用程式生命週期管理（Application lifecycle management）簡稱 ALM 的功能 ; 另一方面「 文字編輯器 Text Editor 」通常只提供如複製、剪下、貼上、搜尋、取代等&lt;strong>文字操作&lt;/strong>功能，但現在兩者已經沒有區分的這麼明顯了，原因就是 VSCode 的出現很大了融合了兩者。 VSCode 其定位採用核心是 &amp;lt;&lt;strong>Text Editor + code understanding + debug&lt;/strong>&amp;gt;，並以&lt;strong>檔案夾&lt;/strong>作為專案管理，保持輕量與高性能，但還是提供強大的支援語法。
&lt;div class="figure fig-100" >
&lt;a class="fancybox" href="https://aryido.github.io/images/plugin-extension/vscode-positioning.jpg" data-fancybox="">
&lt;img class="fig-img" src="https://aryido.github.io/images/plugin-extension/vscode-positioning.jpg" >
&lt;/a>
&lt;/div>
與許多程式編輯器一樣，VSCode 也採用通用 layout，設計理念是希望可以提供簡單直覺的排版，讓使用者可以直觀的選取檔案並閱覽、編輯檔案，本文章首先討論 Workbench 的定義和介紹 vscode layout 的各個名稱。&lt;/p>
&lt;/blockquote></description></item><item><title>VSCode 架構簡介</title><link>https://aryido.github.io/posts/plugin-extension/vscode-architecture/</link><pubDate>Tue, 21 May 2024 23:21:38 +0800</pubDate><guid>https://aryido.github.io/posts/plugin-extension/vscode-architecture/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Visual Studio Code 簡稱 VSCode ，是微軟 2015 年開源的輕量化 code editor ，基於 Electron 並用自家雲端的編輯器 Monaco Editor 作為其底層開發，支援多語言及平台且使用 TypeScript 來進行編寫，也提供了強大的外掛程式拓展機制給人加強功能。VSCode 的開發是由 Eclipse 之父 Erich Gamma 領導（ Erich 也是《設計模式》作者之一），在 2019 年的 Stack Overflow 開發者研究中，其獲選最受歡迎的 code editor 有 &lt;code>50.7%&lt;/code> 的使用率，且還在持續增加當中。
&lt;div class="figure fig-100" >
&lt;a class="fancybox" href="https://aryido.github.io/images/plugin-extension/vscode-context-overview.jpg" data-fancybox="">
&lt;img class="fig-img" src="https://aryido.github.io/images/plugin-extension/vscode-context-overview.jpg" >
&lt;/a>
&lt;/div>
&lt;/p>
&lt;/blockquote></description></item><item><title>Yeoman - 專案模板產生器</title><link>https://aryido.github.io/posts/plugin-extension/yeoman/</link><pubDate>Tue, 21 May 2024 23:21:38 +0800</pubDate><guid>https://aryido.github.io/posts/plugin-extension/yeoman/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>當要建立新專案時，都會需要決定一些關於基礎的架構或開發規劃的事項例如 :&lt;/p>
&lt;ul>
&lt;li>設計 folder structure&lt;/li>
&lt;li>打包編譯工具的選擇&lt;/li>
&lt;li>IDE 預設環境配置；IDE plugin 或 extension 的安裝&lt;/li>
&lt;li>CI/CD、IaC 設定或工具選擇&lt;/li>
&lt;/ul>
&lt;p>每次建立專案時都會參考之前的架構規劃，然後手動複製架構雛形，重新設定參數，其實不太方便&amp;hellip; 這時就可以引入 Scaffold 這樣的&lt;strong>模坂&lt;/strong>概念，來直接生成&lt;strong>專案的骨架&lt;/strong>。本質用意是把那些重複地創建專案基礎結構、專案規格流程取代掉，實現 &lt;strong>DRY (Don’t Repeat Yourself) 原則&lt;/strong>。而 &lt;strong>Yeoman&lt;/strong> 就是一個著名 scaffolding generator tool，微軟官方維護 Visual Studio Code extensions，就是裡面非常著名的例子。&lt;/p>
&lt;/blockquote></description></item></channel></rss>