<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linked-list on Aryido Tech Note</title><link>https://aryido.github.io/tags/linked-list/</link><description>Recent content in linked-list on Aryido Tech Note</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Aug 2023 19:47:15 +0800</lastBuildDate><atom:link href="https://aryido.github.io/tags/linked-list/index.xml" rel="self" type="application/rss+xml"/><item><title>206. Reverse Linked List</title><link>https://aryido.github.io/posts/leetcode/leetcode206/</link><pubDate>Sun, 27 Aug 2023 19:47:15 +0800</pubDate><guid>https://aryido.github.io/posts/leetcode/leetcode206/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>反轉 Linked List 是一道經典的題目，可以用分別用 :&lt;/p>
&lt;ul>
&lt;li>&lt;strong>指針 (iterative)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>遞迴 (recursive)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>兩種截然不同的風格來解答。個人認為是蠻好的題目，可以多寫幾次，並從各種不同的解答方式來說明思考，故在此筆記。要說簡單也不算，對於 recursive 解法一開始我覺得有點難理解 ! 雖然被歸類在 Easy，但我私心覺得蠻容易打擊第一次做的人的&amp;hellip;&lt;/p>
&lt;/blockquote></description></item><item><title>Multiple points 題型簡單介紹</title><link>https://aryido.github.io/posts/algorithm/multiple-points/</link><pubDate>Wed, 23 Aug 2023 22:50:25 +0800</pubDate><guid>https://aryido.github.io/posts/algorithm/multiple-points/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Multiple points 的操作，經常用在 array 或 linkedList 上，有幾點事情可以在刷題時特別注意:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>指標會把 list 切成幾個部分，特別注意每一部份的定義&lt;/p>
&lt;/li>
&lt;li>
&lt;p>list 是否有排序或可以排序&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指標移動是使用&lt;strong>快慢指標&lt;/strong>還是&lt;strong>左右指標&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>會不會改變原本的 list&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>其中第一點，&lt;strong>把 array 切成幾個部分&lt;/strong>，每個部份的&lt;strong>定義&lt;/strong>，是最重要的思想，可以多思考。&lt;/p>
&lt;/blockquote></description></item><item><title>Array &amp; ArrayList &amp; LinkedList 選擇場景</title><link>https://aryido.github.io/posts/java/array-arraylist-linkedlist/</link><pubDate>Sat, 17 Sep 2022 12:49:55 +0800</pubDate><guid>https://aryido.github.io/posts/java/array-arraylist-linkedlist/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Array 是 Java 中的基本功能，而 ArrayList 是 Collection 的一部分； ArrayList 和 LinkedList 都是 Java 中的集合類型，它們都實現了 List 接口。基本特徵簡單如下 :&lt;/p>
&lt;ul>
&lt;li>Array 是一個有固定大小的，每次創建都需要設定，而且在創建後，是不能再更改大小&lt;/li>
&lt;li>ArrayList ，是一個有浮動大小的 Array，且適用於需要快速訪問集合中的元素的場景。&lt;/li>
&lt;li>LinkedList 適用於頻繁插入和刪除元素的場景。&lt;/li>
&lt;/ul>
&lt;p>如果需要實現隊列或棧等數據結構，也可以選擇 LinkedList。&lt;/p>
&lt;/blockquote></description></item><item><title>Graph 介紹</title><link>https://aryido.github.io/posts/data-structure/graph/</link><pubDate>Tue, 13 Sep 2022 21:37:08 +0800</pubDate><guid>https://aryido.github.io/posts/data-structure/graph/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Graph 用於表示物體與物體之間存在某種關係的結構，是內存中不一定連續的資料，每個節點會一個或多個 Reference 指向其他節點&lt;/p>
&lt;ul>
&lt;li>可能有環&lt;/li>
&lt;li>分無向圖和有向圖&lt;/li>
&lt;li>沒有固定入口&lt;/li>
&lt;li>可能有多個入口&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item></channel></rss>