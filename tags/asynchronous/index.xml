<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>asynchronous on Aryido Tech Note</title><link>https://aryido.github.io/tags/asynchronous/</link><description>Recent content in asynchronous on Aryido Tech Note</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 14 Mar 2025 12:25:54 +0800</lastBuildDate><atom:link href="https://aryido.github.io/tags/asynchronous/index.xml" rel="self" type="application/rss+xml"/><item><title>淺談 Concurrency 與 Asynchronous - 兩個常被一起提起的詞</title><link>https://aryido.github.io/posts/develop/concurrency-asynchronous/</link><pubDate>Fri, 14 Mar 2025 12:25:54 +0800</pubDate><guid>https://aryido.github.io/posts/develop/concurrency-asynchronous/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>前面基本介紹了 &lt;a href="https://aryido.github.io/posts/develop/process-thread/">Process 、 Thread&lt;/a> ，那其際的運作可以配合我們自己的常見的電腦使用情況來舉例，例如電腦操作系統的各種基本功能運行的「系統進程」、由 user 自己啓動的如 Word 文書應用程式的「用戶進程」; 再進一步的 Word 應用程式是可以同時進行「打字」、「拼寫檢查、「寫入硬碟儲存」等等工作，以上這些運作就是由「&lt;strong>多執行緒(Multithreading)&lt;/strong>」和「&lt;strong>多進程(Multiprocessing)&lt;/strong>」來達成的，基本上都是思考怎麼更&lt;strong>高效&lt;/strong>更&lt;strong>多工&lt;/strong>的處理多個不同的工作，這時 :&lt;/p>
&lt;ul>
&lt;li>&lt;strong>非同步（Asynchronous）&lt;/strong>&lt;/li>
&lt;li>&lt;strong>併發（Concurrency）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>兩個關鍵字會經常一起出現，是許多高效應用的關鍵，接下來就簡單談一下吧！另外可以稍微注意一下其他相關名詞的中文英文對照。&lt;/p>
&lt;/blockquote></description></item><item><title>淺談 Process、Thread - 很重要的面試八股文</title><link>https://aryido.github.io/posts/develop/process-thread/</link><pubDate>Thu, 13 Mar 2025 19:27:31 +0800</pubDate><guid>https://aryido.github.io/posts/develop/process-thread/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>電腦運行時&lt;strong>任務的的單元是什麼呢&lt;/strong>？ 這個涉及了「程式(Program)」、「進程(Process)」、「線程(Thread)」的概念，是面試時經常會被問到的題目，首先&lt;strong>默念默背&lt;/strong>一下教科書上 Process 和 Thread 的簡單定義：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Process： 資源分配的最小單位&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Thread： CPU 執行的最小單位&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>在實際生活中如點開一個聊天應用程式，這就是將 Program 活化成 Process 的例子，因此我們可以在電腦的資源管理器 Monitor 中看到 PID (Process ID) ; 再繼續以聊天室 Process 為例，我們可以同時「接受對方傳來的訊息」以及「發送自己的訊息給對方」，這就是同個 Process 中不同 Thread 的功勞。&lt;/p>
&lt;/blockquote></description></item></channel></rss>