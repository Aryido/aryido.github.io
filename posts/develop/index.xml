<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aryido Tech Note</title><link>https://aryido.github.io/posts/develop/</link><description>Recent content on Aryido Tech Note</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 12 May 2025 20:13:38 +0800</lastBuildDate><atom:link href="https://aryido.github.io/posts/develop/index.xml" rel="self" type="application/rss+xml"/><item><title>快捷鍵筆記簿</title><link>https://aryido.github.io/posts/develop/hotkey/</link><pubDate>Mon, 12 May 2025 20:13:38 +0800</pubDate><guid>https://aryido.github.io/posts/develop/hotkey/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>在現代開發環境中，熟練掌握各種工具的快捷鍵能顯著提升工作效率，本筆記整理了自己常用開發工具的基礎操作與進階快捷鍵，幫助更高效地進行開發工作。&lt;strong>由於自己現在開發主要環境都是使用 mac os，所以快捷鍵會以 mac 的鍵盤配置為主&lt;/strong>，筆記會列出的重點工具為 :&lt;/p>
&lt;ul>
&lt;li>&lt;code>MacOS Terminal&lt;/code>&lt;/li>
&lt;li>&lt;code>Visual Studio Code (VSCode)&lt;/code>&lt;/li>
&lt;li>&lt;code>Vim&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>然後可能也會補充一些 &lt;code>Windows PowerShell&lt;/code> 和 &lt;code>IntelliJ IDEA&lt;/code>。在日常開發中可有意識的多使用快捷鍵來加深記憶，若遺忘時這裡可以快速查看筆記，鞏固快捷鍵的知識。&lt;/p>
&lt;/blockquote></description></item><item><title>淺談 Concurrency 與 Asynchronous</title><link>https://aryido.github.io/posts/develop/concurrency-asynchronous/</link><pubDate>Fri, 14 Mar 2025 12:25:54 +0800</pubDate><guid>https://aryido.github.io/posts/develop/concurrency-asynchronous/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>前面基本介紹了 &lt;a href="https://aryido.github.io/posts/develop/process-thread/">Process 、 Thread&lt;/a>，而在現實世界中 Process 、 Thread 的任務是更加複雜的，都會是需要「&lt;strong>多執行緒(Multithreading)&lt;/strong>」和「&lt;strong>多進程(Multiprocessing)&lt;/strong>」來協調達成的，再來是要如何&lt;strong>更高效更多工&lt;/strong>的處理多個不同的工作，變成是經常需要思考的問題，這時 :&lt;/p>
&lt;ul>
&lt;li>&lt;strong>非同步（Asynchronous）&lt;/strong> : 執行 Non-blocking 操作，允許程式在等待某些操作完成時可執行其他任務，之後可再回頭處理之前等待操作剩下的部分&lt;/li>
&lt;li>&lt;strong>併發（Concurrency）&lt;/strong> : 是系統能夠在一段時間內處理多個任務，這些任務可能交錯執行，不一定要同時發生&lt;/li>
&lt;/ul>
&lt;p>兩個關鍵字會經常一起出現，因為 Concurrency + Asynchronous 是許多高效能應用的關鍵，接下來就簡單談一下吧！另外可以稍微注意一下其他相關名詞的中文英文對照。&lt;/p>
&lt;/blockquote></description></item><item><title>淺談 Process、Thread</title><link>https://aryido.github.io/posts/develop/process-thread/</link><pubDate>Thu, 13 Mar 2025 19:27:31 +0800</pubDate><guid>https://aryido.github.io/posts/develop/process-thread/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>電腦運行時&lt;strong>任務的的單元是什麼呢&lt;/strong>？ 這個涉及了「程式(Program)」、「進程(Process)」、「線程(Thread)」的概念，是面試時經常會被問到的題目，首先&lt;strong>默念默背&lt;/strong>一下教科書上 Process 和 Thread 的簡單定義：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Process： 資源分配的最小單位&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Thread： CPU 執行的最小單位&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>在實際生活中如點開一個聊天應用程式，這就是將 Program 活化成 Process 的例子，因此我們可以在電腦的資源管理器 Monitor 中看到 PID (Process ID) ; 再繼續以聊天室 Process 為例，我們可以同時「接受對方傳來的訊息」以及「發送自己的訊息給對方」，這就是同個 Process 中不同 Thread 的功勞。&lt;/p>
&lt;/blockquote></description></item><item><title>Homebrew 介紹和常用操作</title><link>https://aryido.github.io/posts/develop/homebrew/</link><pubDate>Mon, 20 May 2024 19:38:28 +0800</pubDate><guid>https://aryido.github.io/posts/develop/homebrew/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Homebrew 是一個廣泛使用在 MAC 上的&lt;strong>套件管理工具&lt;/strong>，可以安裝一些 Mac App Store 上沒有的軟體，其操作十分方便，可以簡化軟體安裝的過程，是個很有名的&lt;strong>非官方工具&lt;/strong>，由 Max Howell 以 Git 和 Ruby 為基底寫成，並通過 GitHub 維護，為 2012 年 GitHub 上擁有最多新貢獻者的專案。對於其作者也有個有趣的軼事：Max Howell 曾應聘過 Google 的職位，面試失敗之後在 Twitter 上發文章 :&lt;/p>
&lt;ul>
&lt;li>Google: 90% of our engineers use the software you wrote (Homebrew), but you can&amp;rsquo;t invert a binary tree on a whiteboard so f*** off.&lt;/li>
&lt;/ul>
&lt;p>因此在網上引發了面試白板題的討論。&lt;/p>
&lt;/blockquote></description></item><item><title>Regular Expression 簡介</title><link>https://aryido.github.io/posts/develop/regular-expression-intro/</link><pubDate>Fri, 26 Jan 2024 21:19:20 +0800</pubDate><guid>https://aryido.github.io/posts/develop/regular-expression-intro/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Regular Expression 是一種強大的&lt;strong>字串匹配&lt;/strong>、&lt;strong>字串查找&lt;/strong>等操作工具，常簡寫爲 regex 、regexp 或 RE。這概念最初由 Unix 的 sed、grep 操作而普及開，它定義一系列&lt;strong>符號&lt;/strong>來描述搜索的規則。
但在不同的 coding language 或者是不同 OS 中， 常發現 regex 都會有些差異，主要原因是演進過程中，出現 &lt;strong>POSIX&lt;/strong> 與 &lt;strong>PCRE&lt;/strong> 兩種 :&lt;/p>
&lt;ul>
&lt;li>
&lt;p>POSIX : 可以說是原初版本，主要用於 UNIX 系統的文本處理，grep 、sed 、awk 等都屬之&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PCRE : 現代 coding language如 Python、Ruby、 C、C++、Java 都屬於 PCRE 派系。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>apt、yum、apk 介绍</title><link>https://aryido.github.io/posts/develop/apt-yum-apk/</link><pubDate>Wed, 22 Mar 2023 22:58:26 +0800</pubDate><guid>https://aryido.github.io/posts/develop/apt-yum-apk/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Linux 有多種流通版本，例如常見的 Ubuntu、Debian、CentOS、Fedora、Red Hat 等等，其中裡面預設的&lt;strong>包管理系統&lt;/strong>也不太一樣。包管理系統可以&lt;strong>安裝 package&lt;/strong> 、&lt;strong>更新 package&lt;/strong> 、確保使用的 &lt;strong>package 是經過審查的&lt;/strong>。 接下來淺淺的分析 apt 、 yum 、 apk 之間的差別。&lt;/p>
&lt;/blockquote></description></item><item><title>Apple M1 作業系統坑 - cloud run 出現錯誤</title><link>https://aryido.github.io/posts/develop/m1-error-2/</link><pubDate>Sun, 08 Jan 2023 21:54:38 +0800</pubDate><guid>https://aryido.github.io/posts/develop/m1-error-2/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>Cloud Run 是 Google 的 Serverless 產品，讓我們不用管理基礎 infra 也能建置容器，並會根據流量自動調整資源，且只依據實際使用的資源收費。 這邊特別注意一下，目前 Cloud Run 似乎還沒支持 ARM 格式的 image，故有使用 M1 筆電包 docker image 要特別注意一下，這會出現不可預期的 bug !&lt;/p>
&lt;/blockquote></description></item><item><title>Apple M1 作業系統坑 - CPU 簡介</title><link>https://aryido.github.io/posts/develop/m1-error-1/</link><pubDate>Wed, 04 Jan 2023 23:02:30 +0800</pubDate><guid>https://aryido.github.io/posts/develop/m1-error-1/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>現在公司很多都會給新進員工配上 Apple M1 筆電，整體筆電用起來都還不錯的。但因為 Apple M1 底層處理器架構大改變，對於軟體開發在本地端測試時候，常發生一些不可預期的狀況。這邊就來記錄一下有遇到的 BUG。&lt;/p>
&lt;/blockquote></description></item><item><title>CIDR 介紹</title><link>https://aryido.github.io/posts/develop/cidr/</link><pubDate>Sun, 13 Nov 2022 17:37:27 +0800</pubDate><guid>https://aryido.github.io/posts/develop/cidr/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>無類別域間路由（ Classless Inter-Domain Routing ，簡稱 CIDR ）是為了避免造成 IP 位址的大量浪費，於是出現的一種技術。CIDR重點有：&lt;/p>
&lt;ol>
&lt;li>多變長度子網路遮罩 (Variable-Length Subnet Mask，VLSM)&lt;/li>
&lt;li>路由匯總 （Route Summarization）(暫不介紹)&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>IP and Subnet Mask 介紹</title><link>https://aryido.github.io/posts/develop/ip-and-subnetmask/</link><pubDate>Mon, 07 Nov 2022 22:55:14 +0800</pubDate><guid>https://aryido.github.io/posts/develop/ip-and-subnetmask/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>IP (Internet Protocol) 是電腦的地址。IP 位址在系統中是一個 32 位元的數字，但為了方便人類讀寫，每一個位元組會被轉換成一個十進位的數字。&lt;/p>
&lt;p>IP 位址可以分為 Network ID 和 Host ID，為了讓電腦可以判斷出 IP 位址的 Network ID 及 Host ID，必須靠子網路遮罩 (Subnet Mask) 的幫忙。&lt;/p>
&lt;/blockquote></description></item></channel></rss>