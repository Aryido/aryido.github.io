<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ci-cd on Aryido Tech Note</title><link>https://aryido.github.io/categories/ci-cd/</link><description>Recent content in ci-cd on Aryido Tech Note</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 May 2025 12:42:08 +0800</lastBuildDate><atom:link href="https://aryido.github.io/categories/ci-cd/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub Flow</title><link>https://aryido.github.io/posts/cicd/git-workflow/</link><pubDate>Thu, 01 May 2025 12:42:08 +0800</pubDate><guid>https://aryido.github.io/posts/cicd/git-workflow/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>雖然使用了 Git 作為版本管理工具，但每個人對於分支的認知可能不同，故造成每次 commit 到不同分支之後，要&lt;strong>合併&lt;/strong>要回哪個分支可能會有歧義，這時就可參考一些已存在的 Workflow 規範，只要團隊遵守這樣的 branch 的 commit 和 merge 規則，就可以有一致性。每個 Workflow 規範都不太一樣，常見有: Git Flow、&lt;strong>GitHub Flow&lt;/strong>、GitLab flow ，主要都是希望就算 Project 越來越大協作人員越來越多，也能有效管理 Git Branch，那這邊會以 &lt;strong>GitHub Flow&lt;/strong> 為主要說明，但也會筆記分析了解其他不同策略的優缺點。&lt;/p>
&lt;/blockquote></description></item><item><title>Git 操作筆記</title><link>https://aryido.github.io/posts/cicd/git-cli/</link><pubDate>Wed, 30 Apr 2025 13:53:19 +0800</pubDate><guid>https://aryido.github.io/posts/cicd/git-cli/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>用 Git 來做版本管理時，偶爾會需要&lt;strong>撤銷&lt;/strong>某些操作，但對於已經推上遠端 Github / Gitlab repository 的程式碼，並且該分支已經有多人協作的時候，如果要修正的話其實有蠻多需要注意的事情呢 ; 再來 Git 是有蠻多功能和一些命令的，有時不常用的話也會忘記或者錯估使用場景。在開始筆記之前先把一些名詞定義好，一般來說 Git 的操作會涉及到幾個&lt;strong>區域&lt;/strong> ：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>硬碟區 disk&lt;/strong> : 檔案存放的一般資料夾，也會被稱為 &lt;strong>workspace&lt;/strong>&lt;/li>
&lt;li>&lt;strong>暫存區 staging&lt;/strong> : 保存 &lt;code>git add&lt;/code> 紀錄的地方，也被稱為 &lt;strong>index&lt;/strong>&lt;/li>
&lt;li>&lt;strong>本地端 git local&lt;/strong> : 保存 &lt;code>git commit&lt;/code> 紀錄的地方，也被稱為 &lt;strong>repository&lt;/strong>&lt;/li>
&lt;li>&lt;strong>遠端 git remote&lt;/strong> : &lt;code>git push&lt;/code> 的倉儲，如 &lt;strong>Github&lt;/strong>、&lt;strong>Gitlab&lt;/strong> 等等&lt;/li>
&lt;/ul>
&lt;p>而各個之間狀態變化的簡單關係如下圖所示 :
&lt;div class="figure fig-100" >
&lt;a class="fancybox" href="https://aryido.github.io/images/cicd/git-control-flow.jpg" data-fancybox="">
&lt;img class="fig-img" src="https://aryido.github.io/images/cicd/git-control-flow.jpg" >
&lt;/a>
&lt;/div>
&lt;/p>
&lt;/blockquote></description></item><item><title>Rolling vs Canary vs Blue-Green</title><link>https://aryido.github.io/posts/cicd/rolling-canary-bluegreen/</link><pubDate>Wed, 17 May 2023 00:26:34 +0800</pubDate><guid>https://aryido.github.io/posts/cicd/rolling-canary-bluegreen/</guid><description>&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>現今應用程式發展迅速， app 的更新也變得越來越頻繁，在微服務、DevOps、Cloud-native 的迭代過程中，最終都需要上線。上線就需要部署；需要部署就意味著有修改；修改則意味著有風險，要如何在&lt;strong>盡量不影響 user 的前提下，讓 app 升版呢&lt;/strong> ? 這時就有一些&lt;strong>部屬策略&lt;/strong>可以考慮。對於 Deployment Strategies 有一些基本的專有名詞和觀念，例如 :&lt;/p>
&lt;ul>
&lt;li>Recreate&lt;/li>
&lt;li>Rolling&lt;/li>
&lt;li>Blue-Green&lt;/li>
&lt;li>Canary&lt;/li>
&lt;/ul>
&lt;p>對於應該使用哪種 Deployment Strategy 、它們的工作原理、優缺點等等，以下會做些基本介紹。&lt;/p>
&lt;/blockquote></description></item></channel></rss>